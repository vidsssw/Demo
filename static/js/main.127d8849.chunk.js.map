{"version":3,"sources":["logo.svg","mediaBlockRenderer.js","MyEditor.js","Container.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","mediaBlockRenderer","block","getType","component","Media","editable","Audio","props","controls","src","allow","Image","console","log","Video","frameborder","media","entity","contentState","getEntity","getEntityAt","getData","type","resizeablePlugin","createResizeablePlugin","alignmentPlugin","createAlignmentPlugin","focusPlugin","createFocusPlugin","decorator","composeDecorators","imagePlugin","createImagePlugin","AlignmentTool","plugins","React","Component","Container","onChange","editorState","setState","handleKeyCommand","command","newState","RichUtils","state","onURLChange","e","urlValue","target","value","focus","refs","editor","onAddImage","base64","contentStateWithEntity","getCurrentContent","createEntity","entityKey","getLastCreatedEntityKey","newEditorState","EditorState","set","currentContent","AtomicBlockUtils","insertAtomicBlock","setTimeout","onAddImageClick","preventDefault","window","prompt","handleClick","event","a","file","files","size","toBase64","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","onerror","error","onUnderlineClick","toggleInlineStyle","onBoldClick","onItalicClick","createEmpty","className","onClick","this","style","fontSize","textAlign","padding","margin","blockRendererFn","ref","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.127d8849.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\r\nimport { EditorState, RichUtils, AtomicBlockUtils } from \"draft-js\";\r\n\r\nexport const mediaBlockRenderer = (block) => {\r\n  if (block.getType() === \"atomic\") {\r\n    return {\r\n      component: Media,\r\n      editable: false,\r\n    };\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\nconst Audio = (props) => {\r\n  // note: requires embed url from embed code\r\n  return <iframe controls src={props.src} allow=\"autoplay; encrypted-media\" />;\r\n};\r\n\r\nconst Image = (props) => {\r\n  console.log(\"props\", props);\r\n  if (!!props.src) {\r\n    return <img src={props.src} />;\r\n  }\r\n  return null;\r\n};\r\n\r\nconst Video = (props) => {\r\n  // return <iframe controls src={props.src} />;\r\n\r\n  // note: requires embed url from embed code\r\n  return (\r\n    <iframe\r\n      src={props.src}\r\n      frameborder=\"0\"\r\n      allow=\"autoplay; encrypted-media\"\r\n    ></iframe>\r\n  );\r\n};\r\n\r\nconst Media = (props) => {\r\n  const entity = props.contentState.getEntity(props.block.getEntityAt(0));\r\n  const { src } = entity.getData();\r\n  const type = entity.getType();\r\n  console.log(entity.getType(), \"console\", entity.getData());\r\n\r\n  let media;\r\n  if (type === \"audio\") {\r\n    media = <Audio src={src} />;\r\n  } else if (type === \"image\") {\r\n    media = <Image src={src} />;\r\n  } else if (type === \"video\") {\r\n    media = <Video src={src} />;\r\n  }\r\n\r\n  return media;\r\n};\r\n","import React from \"react\";\r\nimport { convertToRaw, EditorState, AtomicBlockUtils } from \"draft-js\";\r\nimport { mediaBlockRenderer } from \"./mediaBlockRenderer\";\r\nimport Editor, { composeDecorators } from \"draft-js-plugins-editor\";\r\nimport createImagePlugin from \"draft-js-image-plugin\";\r\nimport createResizeablePlugin from \"draft-js-resizeable-plugin\";\r\n\r\nimport createAlignmentPlugin from \"draft-js-alignment-plugin\";\r\nimport createFocusPlugin from \"draft-js-focus-plugin\";\r\nconst resizeablePlugin = createResizeablePlugin();\r\nconst alignmentPlugin = createAlignmentPlugin();\r\nconst focusPlugin = createFocusPlugin();\r\nconst decorator = composeDecorators(\r\n  resizeablePlugin.decorator,\r\n  alignmentPlugin.decorator,\r\n  focusPlugin.decorator\r\n);\r\nconst imagePlugin = createImagePlugin({ decorator });\r\n\r\nconst { AlignmentTool } = alignmentPlugin;\r\nconst plugins = [imagePlugin, alignmentPlugin, resizeablePlugin];\r\n\r\nexport default class MyEditor extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { editorState: EditorState.createEmpty() };\r\n    this.onChange = (editorState) => this.setState({ editorState });\r\n  }\r\n  focus = () => {\r\n    console.log(\"here\", this.state.editorState);\r\n    this.editor.focus();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"editorContainer\">\r\n        <div className=\"editors\" onClick={this.focus}>\r\n          <Editor\r\n            editorState={this.state.editorState}\r\n            onChange={this.onChange}\r\n            plugins={plugins}\r\n            ref={(element) => {\r\n              this.editor = element;\r\n            }}\r\n          />\r\n\r\n          <AlignmentTool />\r\n        </div>\r\n        <input type=\"file\" onChange={this.handleClick} />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  handleClick = async (event) => {\r\n    const file = event.target.files[0];\r\n    const size = event.target.files[0].size;\r\n    const toBase64 = (file, type, size) =>\r\n      new Promise((resolve, reject) => {\r\n        const reader = new FileReader();\r\n        reader.readAsDataURL(file);\r\n        reader.onload = () => {\r\n          resolve(reader.result);\r\n        };\r\n        reader.onerror = (error) => reject(error);\r\n      });\r\n\r\n    const base64 = await toBase64(file, size);\r\n    const newEditorState = this.insertImage(this.state.editorState, base64);\r\n    console.log(newEditorState, \"NEW\");\r\n    this.onChange(newEditorState);\r\n  };\r\n\r\n  insertImage = (editorState, base64) => {\r\n    const contentState = editorState.getCurrentContent();\r\n    const contentStateWithEntity = contentState.createEntity(\r\n      \"image\",\r\n      \"IMMUTABLE\",\r\n      { src: base64 }\r\n    );\r\n    const entityKey = contentStateWithEntity.getLastCreatedEntityKey();\r\n    const newEditorState = EditorState.set(editorState, {\r\n      currentContent: contentStateWithEntity,\r\n    });\r\n    return AtomicBlockUtils.insertAtomicBlock(newEditorState, entityKey, \" \");\r\n  };\r\n}\r\n","import React from \"react\";\r\nimport { EditorState, RichUtils, AtomicBlockUtils } from \"draft-js\";\r\nimport Editor, { composeDecorators } from \"draft-js-plugins-editor\";\r\nimport { mediaBlockRenderer } from \"./mediaBlockRenderer\";\r\nimport \"./App.css\";\r\n\r\nimport createImagePlugin from \"draft-js-image-plugin\";\r\nimport createResizeablePlugin from \"draft-js-resizeable-plugin\";\r\n\r\nimport createAlignmentPlugin from \"draft-js-alignment-plugin\";\r\nimport createFocusPlugin from \"draft-js-focus-plugin\";\r\n\r\nimport \"draft-js-focus-plugin/lib/plugin.css\";\r\nimport \"draft-js-image-plugin/lib/plugin.css\";\r\nimport \"draft-js-alignment-plugin/lib/plugin.css\";\r\nconst resizeablePlugin = createResizeablePlugin();\r\nconst alignmentPlugin = createAlignmentPlugin();\r\nconst focusPlugin = createFocusPlugin();\r\nconst decorator = composeDecorators(\r\n  resizeablePlugin.decorator,\r\n  alignmentPlugin.decorator,\r\n  focusPlugin.decorator\r\n);\r\nconst imagePlugin = createImagePlugin({ decorator });\r\n\r\nconst { AlignmentTool } = alignmentPlugin;\r\nconst plugins = [imagePlugin, alignmentPlugin, resizeablePlugin, focusPlugin];\r\n\r\nclass Container extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      editorState: EditorState.createEmpty(),\r\n    };\r\n  }\r\n\r\n  onChange = (editorState) => {\r\n    this.setState({\r\n      editorState,\r\n    });\r\n  };\r\n\r\n  handleKeyCommand = (command) => {\r\n    const newState = RichUtils.handleKeyCommand(\r\n      this.state.editorState,\r\n      command\r\n    );\r\n    if (newState) {\r\n      this.onChange(newState);\r\n      return \"handled\";\r\n    }\r\n    return \"not-handled\";\r\n  };\r\n\r\n  onURLChange = (e) => this.setState({ urlValue: e.target.value });\r\n\r\n  focus = () => this.refs.editor.focus();\r\n\r\n  onAddImage = (base64) => {\r\n    //e.preventDefault();\r\n    const editorState = this.state.editorState;\r\n    //const urlValue = window.prompt(\"Paste Image Link\");\r\n    const contentState = editorState.getCurrentContent();\r\n    const contentStateWithEntity = contentState.createEntity(\r\n      \"image\",\r\n      \"IMMUTABLE\",\r\n      { src: base64 }\r\n    );\r\n    const entityKey = contentStateWithEntity.getLastCreatedEntityKey();\r\n    const newEditorState = EditorState.set(\r\n      editorState,\r\n      { currentContent: contentStateWithEntity },\r\n      \"create-entity\"\r\n    );\r\n    this.setState(\r\n      {\r\n        editorState: AtomicBlockUtils.insertAtomicBlock(\r\n          newEditorState,\r\n          entityKey,\r\n          \" \"\r\n        ),\r\n      },\r\n      () => {\r\n        setTimeout(() => this.focus(), 0);\r\n      }\r\n    );\r\n  };\r\n\r\n  onAddImageClick = (e) => {\r\n    e.preventDefault();\r\n    const editorState = this.state.editorState;\r\n    const urlValue = window.prompt(\"Paste Image Link\");\r\n    const contentState = editorState.getCurrentContent();\r\n    const contentStateWithEntity = contentState.createEntity(\r\n      \"image\",\r\n      \"IMMUTABLE\",\r\n      { src: urlValue }\r\n    );\r\n    const entityKey = contentStateWithEntity.getLastCreatedEntityKey();\r\n    const newEditorState = EditorState.set(\r\n      editorState,\r\n      { currentContent: contentStateWithEntity },\r\n      \"create-entity\"\r\n    );\r\n    this.setState(\r\n      {\r\n        editorState: AtomicBlockUtils.insertAtomicBlock(\r\n          newEditorState,\r\n          entityKey,\r\n          \" \"\r\n        ),\r\n      },\r\n      () => {\r\n        setTimeout(() => this.focus(), 0);\r\n      }\r\n    );\r\n  };\r\n\r\n  handleClick = async (event) => {\r\n    const file = event.target.files[0];\r\n    const size = event.target.files[0].size;\r\n    const toBase64 = (file, type, size) =>\r\n      new Promise((resolve, reject) => {\r\n        const reader = new FileReader();\r\n        reader.readAsDataURL(file);\r\n        reader.onload = () => {\r\n          resolve(reader.result);\r\n        };\r\n        reader.onerror = (error) => reject(error);\r\n      });\r\n\r\n    const base64 = await toBase64(file, size);\r\n    await this.onAddImage(base64);\r\n  };\r\n\r\n  onUnderlineClick = () => {\r\n    this.onChange(\r\n      RichUtils.toggleInlineStyle(this.state.editorState, \"UNDERLINE\")\r\n    );\r\n  };\r\n\r\n  onBoldClick = () => {\r\n    this.onChange(RichUtils.toggleInlineStyle(this.state.editorState, \"BOLD\"));\r\n  };\r\n\r\n  onItalicClick = () => {\r\n    this.onChange(\r\n      RichUtils.toggleInlineStyle(this.state.editorState, \"ITALIC\")\r\n    );\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"editorContainer\">\r\n        <div className=\"menuButtons\">\r\n          <button onClick={this.onUnderlineClick}>U</button>\r\n          <button onClick={this.onBoldClick}>\r\n            <b>B</b>\r\n          </button>\r\n          <button onClick={this.onItalicClick}>\r\n            <em>I</em>\r\n          </button>\r\n          <button className=\"inline styleButton\" onClick={this.onAddImageClick}>\r\n            <i\r\n              className=\"material-icons\"\r\n              style={{\r\n                fontSize: \"16px\",\r\n                textAlign: \"center\",\r\n                padding: \"0px\",\r\n                margin: \"0px\",\r\n              }}\r\n            >\r\n              image\r\n            </i>\r\n          </button>\r\n\r\n          <input type=\"file\" onChange={this.handleClick} />\r\n        </div>\r\n        <div className=\"editors\">\r\n          <Editor\r\n            blockRendererFn={mediaBlockRenderer}\r\n            editorState={this.state.editorState}\r\n            handleKeyCommand={this.handleKeyCommand}\r\n            onChange={this.onChange}\r\n            plugins={plugins}\r\n            ref=\"editor\"\r\n          />\r\n          <AlignmentTool />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Container;\r\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport MyEditor from \"./MyEditor\";\nimport Container from \"./Container\";\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Container />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}